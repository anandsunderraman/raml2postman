{
    "folders": [
        {
            "id": "",
            "name": "/subscription",
            "description": "",
            "order": [
                "",
                "",
                ""
            ],
            "collection_name": "GitHub API",
            "collection_id": ""
        },
        {
            "id": "",
            "name": "/:commentId",
            "description": "",
            "order": [
                "",
                "",
                ""
            ],
            "collection_name": "GitHub API",
            "collection_id": ""
        },
        {
            "id": "",
            "name": "/repos",
            "description": "",
            "order": [
                "",
                ""
            ],
            "collection_name": "GitHub API",
            "collection_id": ""
        },
        {
            "id": "",
            "name": "/:userId",
            "description": "",
            "order": [
                "",
                "",
                ""
            ],
            "collection_name": "GitHub API",
            "collection_id": ""
        },
        {
            "id": "",
            "name": "/repos",
            "description": "",
            "order": [
                "",
                ""
            ],
            "collection_name": "GitHub API",
            "collection_id": ""
        }
    ],
    "id": "",
    "name": "GitHub API",
    "order": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    ],
    "requests": [
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Search repositories.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/search/repositories",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/search/repositories?q=&sort=&order="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Search code.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/search/code",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/search/code?q=&sort=&order="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Search users.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/search/users",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/search/users?q=&sort=&order="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List public events.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/events",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/events"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List Feeds.\nGitHub provides several timeline resources in Atom format. The Feeds API\n lists all the feeds available to the authenticating user.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/feeds",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/feeds"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "This gives some information about GitHub.com, the service.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/meta",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/meta"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get your current rate limit status\nNote: Accessing this endpoint does not count against your rate limit.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/rate_limit",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/rate_limit"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List issues.\nList all issues across all the authenticated user's visible repositories.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/issues",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/issues?filter=&state=&labels=&sort=&direction=&since="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List your notifications.\nList all notifications for the current user, grouped by repository.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/notifications",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/notifications?all=&participating=&since="
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Mark as read.\nMarking a notification as \"read\" removes it from the default view on GitHub.com.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "put",
            "name": "/notifications",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/notifications",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "View a single thread.\n\nParameters:\n\nid: Id of a thread.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/notifications/threads/:id",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/notifications/threads/:id"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "\n\nParameters:\n\nid: Id of a thread.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "patch",
            "name": "/notifications/threads/:id",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/notifications/threads/:id"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a Thread Subscription.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/notifications/threads/:id/subscription",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/notifications/threads/:id/subscription"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Set a Thread Subscription.\nThis lets you subscribe to a thread, or ignore it. Subscribing to a thread\nis unnecessary if the user is already subscribed to the repository. Ignoring\na thread will mute all future notifications (until you comment or get @mentioned).\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "put",
            "name": "/notifications/threads/:id/subscription",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/notifications/threads/:id/subscription",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Delete a Thread Subscription.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/notifications/threads/:id/subscription",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/notifications/threads/:id/subscription"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List the authenticated user's gists or if called anonymously, this will\nreturn all public gists.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/gists",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gists?since="
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a gist.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/gists",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gists",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List all public gists.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/gists/public",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gists/public?since="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List the authenticated user's starred gists.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/gists/starred",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gists/starred?since="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a single gist.\n\nParameters:\n\nid: Id of a thread.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/gists/:id",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gists/:id"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Edit a gist.\n\nParameters:\n\nid: Id of a thread.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "patch",
            "name": "/gists/:id",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gists/:id",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Delete a gist.\n\nParameters:\n\nid: Id of a thread.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/gists/:id",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gists/:id"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Check if a gist is starred.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/gists/:id/star",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gists/:id/star"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Star a gist.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "put",
            "name": "/gists/:id/star",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gists/:id/star"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Unstar a gist.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/gists/:id/star",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gists/:id/star"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Fork a gist.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "post",
            "name": "/gists/:id/forks",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gists/:id/forks"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List comments on a gist.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/gists/:id/comments",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gists/:id/comments"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a comment\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/gists/:id/comments",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gists/:id/comments",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a single comment.\n\nParameters:\n\ncommentId: Id of the comment.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/gists/:id/comments/:commentId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gists/:id/comments/:commentId"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Edit a comment.\n\nParameters:\n\ncommentId: Id of the comment.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "patch",
            "name": "/gists/:id/comments/:commentId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gists/:id/comments/:commentId",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Delete a comment.\n\nParameters:\n\ncommentId: Id of the comment.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/gists/:id/comments/:commentId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gists/:id/comments/:commentId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get an Organization.\n\nParameters:\n\norgId: Id of organisation.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/orgs/:orgId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/orgs/:orgId"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Edit an Organization.\n\nParameters:\n\norgId: Id of organisation.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "patch",
            "name": "/orgs/:orgId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/orgs/:orgId",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List public events for an organization.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/orgs/:orgId/events",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/orgs/:orgId/events"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List issues.\nList all issues for a given organization for the authenticated user.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/orgs/:orgId/issues",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/orgs/:orgId/issues?filter=&state=&labels=&sort=&direction=&since="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Members list.\nList all users who are members of an organization. A member is a user that\nbelongs to at least 1 team in the organization. If the authenticated user\nis also an owner of this organization then both concealed and public members\nwill be returned. If the requester is not an owner of the organization the\nquery will be redirected to the public members list.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/orgs/:orgId/members",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/orgs/:orgId/members"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Remove a member.\nRemoving a user from this list will remove them from all teams and they\nwill no longer have any access to the organization's repositories.\n\n\nParameters:\n\nuserId: Id of the user.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/orgs/:orgId/members/:userId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/orgs/:orgId/members/:userId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Public members list.\nMembers of an organization can choose to have their membership publicized\nor not.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/orgs/:orgId/public_members",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/orgs/:orgId/public_members"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Check public membership.\n\nParameters:\n\nuserId: Id of the user.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/orgs/:orgId/public_members/:userId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/orgs/:orgId/public_members/:userId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Publicize a user's membership.\n\nParameters:\n\nuserId: Id of the user.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "put",
            "name": "/orgs/:orgId/public_members/:userId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/orgs/:orgId/public_members/:userId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Conceal a user's membership.\n\nParameters:\n\nuserId: Id of the user.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/orgs/:orgId/public_members/:userId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/orgs/:orgId/public_members/:userId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List teams.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/orgs/:orgId/teams",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/orgs/:orgId/teams"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create team.\nIn order to create a team, the authenticated user must be an owner of orgId.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/orgs/:orgId/teams",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/orgs/:orgId/teams",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List repositories for the specified org.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/orgs/:orgId/repos",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/orgs/:orgId/repos?type="
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a new repository for the authenticated user. OAuth users must supply\nrepo scope.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/orgs/:orgId/repos",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/orgs/:orgId/repos",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get team.\n\nParameters:\n\nteamsId: Id of a team.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/teams/:teamsId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/teams/:teamsId"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Edit team.\nIn order to edit a team, the authenticated user must be an owner of the org\nthat the team is associated with.\n\n\nParameters:\n\nteamsId: Id of a team.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "patch",
            "name": "/teams/:teamsId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/teams/:teamsId",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Delete team.\nIn order to delete a team, the authenticated user must be an owner of the\norg that the team is associated with.\n\n\nParameters:\n\nteamsId: Id of a team.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/teams/:teamsId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/teams/:teamsId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List team members.\nIn order to list members in a team, the authenticated user must be a member\nof the team.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/teams/:teamsId/members",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/teams/:teamsId/members"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get team member.\nIn order to get if a user is a member of a team, the authenticated user must\nbe a member of the team.\n\n\nParameters:\n\nuserId: Id of a member.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/teams/:teamsId/members/:userId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/teams/:teamsId/members/:userId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Add team member.\nIn order to add a user to a team, the authenticated user must have 'admin'\npermissions to the team or be an owner of the org that the team is associated\nwith.\n\n\nParameters:\n\nuserId: Id of a member.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "put",
            "name": "/teams/:teamsId/members/:userId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/teams/:teamsId/members/:userId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Remove team member.\nIn order to remove a user from a team, the authenticated user must have 'admin'\npermissions to the team or be an owner of the org that the team is associated\nwith.\nNOTE This does not delete the user, it just remove them from the team.\n\n\nParameters:\n\nuserId: Id of a member.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/teams/:teamsId/members/:userId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/teams/:teamsId/members/:userId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List all public repositories.\nThis provides a dump of every public repository, in the order that they\nwere created.\nNote: Pagination is powered exclusively by the since parameter. is the\nLink header to get the URL for the next page of repositories.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repositories",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repositories?since="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get repository.\n\nParameters:\n\nownerId: Id of the owner.\n\nrepoId: Id of repository.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Edit repository.\n\nParameters:\n\nownerId: Id of the owner.\n\nrepoId: Id of repository.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "patch",
            "name": "/repos/:ownerId/:repoId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Delete a Repository.\nDeleting a repository requires admin access. If OAuth is used, the delete_repo\nscope is required.\n\n\nParameters:\n\nownerId: Id of the owner.\n\nrepoId: Id of repository.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/repos/:ownerId/:repoId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get list of repository events.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/events",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/events"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List languages.\nList languages for the specified repository. The value on the right of a\nlanguage is the number of bytes of code written in that language.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/languages",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/languages"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a Blob.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/git/blobs",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/git/blobs",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a Blob.\nSince blobs can be any arbitrary binary data, the input and responses for\nthe blob API takes an encoding parameter that can be either utf-8 or\nbase64. If your data cannot be losslessly sent as a UTF-8 string, you can\nbase64 encode it.\n\n\nParameters:\n\nshaCode: SHA-1 code.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/git/blobs/:shaCode",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/git/blobs/:shaCode"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a Commit.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/git/commits",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/git/commits",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a Commit.\n\nParameters:\n\nshaCode: SHA-1 code.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/git/commits/:shaCode",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/git/commits/:shaCode"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get all References\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/git/refs",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/git/refs"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a Reference\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/git/refs",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/git/refs",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get list of subdirectories.\n\nParameters:\n\nheads: Subfolder of path to the branch.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/git/refs/:heads",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/git/refs/:heads"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a Reference.\n\nParameters:\n\nbranch: Path to the branch.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/git/refs/:heads/:branch",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/git/refs/:heads/:branch"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Update a Reference\n\nParameters:\n\nbranch: Path to the branch.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "patch",
            "name": "/repos/:ownerId/:repoId/git/refs/:heads/:branch",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/git/refs/:heads/:branch",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Delete a Reference.\n\nParameters:\n\nbranch: Path to the branch.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/repos/:ownerId/:repoId/git/refs/:heads/:branch",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/git/refs/:heads/:branch"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a Tag Object.\nNote that creating a tag object does not create the reference that makes a\ntag in Git. If you want to create an annotated tag in Git, you have to do\nthis call to create the tag object, and then create the refs/tags/[tag]\nreference. If you want to create a lightweight tag, you only have to create\nthe tag reference - this call would be unnecessary.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/git/tags",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/git/tags",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a Tag.\n\nParameters:\n\nshaCode: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/git/tags/:shaCode",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/git/tags/:shaCode"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a Tree.\nThe tree creation API will take nested entries as well. If both a tree and\na nested path modifying that tree are specified, it will overwrite the\ncontents of that tree with the new path contents and write a new tree out.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/git/trees",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/git/trees",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a Tree.\n\nParameters:\n\nshaCode: Id of the owner.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/git/trees/:shaCode",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/git/trees/:shaCode?recursive="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get the README.\nThis method returns the preferred README for a repository.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/readme",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/readme?ref="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List Stargazers.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/stargazers",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/stargazers"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List watchers.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/subscribers",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/subscribers"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get list of tags.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/tags",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/tags"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get list of teams\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/teams",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/teams"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List Stargazers. New implementation.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/watchers",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/watchers"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get list of contributors.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/contributors",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/contributors?anon="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get list of branches\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/branches",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/branches"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get Branch\n\nParameters:\n\nbranchId: Id of the branch.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/branches/:branchId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/branches/:branchId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List issues for a repository.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/issues",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues?filter=&state=&labels=&sort=&direction=&since="
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create an issue.\nAny user with pull access to a repository can create an issue.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/issues",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List issue events for a repository.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/issues/events",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues/events"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a single event.\n\nParameters:\n\neventId: Id of the event.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/issues/events/:eventId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues/events/:eventId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a single issue\n\nParameters:\n\nnumber: Id of the issue.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/issues/:number",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues/:number"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Edit an issue.\nIssue owners and users with push access can edit an issue.\n\n\nParameters:\n\nnumber: Id of the issue.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "patch",
            "name": "/repos/:ownerId/:repoId/issues/:number",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues/:number",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List comments on an issue.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/issues/:number/comments",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues/:number/comments"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a comment.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/issues/:number/comments",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues/:number/comments",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List issue events for a repository.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/issues/:number/events",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues/:number/events"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a single event.\n\nParameters:\n\neventId: Id of the event.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/issues/:number/events/:eventId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues/:number/events/:eventId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List labels on an issue.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/issues/:number/labels",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues/:number/labels"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Add labels to an issue.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/issues/:number/labels",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues/:number/labels",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Replace all labels for an issue.\nSending an empty array ([]) will remove all Labels from the Issue.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "put",
            "name": "/repos/:ownerId/:repoId/issues/:number/labels",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues/:number/labels",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Remove all labels from an issue.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/repos/:ownerId/:repoId/issues/:number/labels",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues/:number/labels"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Remove a label from an issue.\n\nParameters:\n\nname: Name of the label.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/repos/:ownerId/:repoId/issues/:number/labels/:name",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues/:number/labels/:name"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List comments in a repository.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/issues/comments",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues/comments?sort=&direction=&since="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a single comment.\n\nParameters:\n\ncommentId: Id of the comment.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/issues/comments/:commentId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues/comments/:commentId"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Edit a comment.\n\nParameters:\n\ncommentId: Id of the comment.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "patch",
            "name": "/repos/:ownerId/:repoId/issues/comments/:commentId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues/comments/:commentId",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Delete a comment.\n\nParameters:\n\ncommentId: Id of the comment.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/repos/:ownerId/:repoId/issues/comments/:commentId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/issues/comments/:commentId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List your notifications in a repository\nList all notifications for the current user.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/notifications",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/notifications?all=&participating=&since="
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Mark notifications as read in a repository.\nMarking all notifications in a repository as \"read\" removes them from the\ndefault view on GitHub.com.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "put",
            "name": "/repos/:ownerId/:repoId/notifications",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/notifications",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a Repository Subscription.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/subscription",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/subscription"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Set a Repository Subscription\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "put",
            "name": "/repos/:ownerId/:repoId/subscription",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/subscription",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Delete a Repository Subscription.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/repos/:ownerId/:repoId/subscription",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/subscription"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List assignees.\nThis call lists all the available assignees (owner   collaborators) to which\nissues may be assigned.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/assignees",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/assignees"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Check assignee.\nYou may also check to see if a particular user is an assignee for a repository.\n\n\nParameters:\n\nassignee: Login of the assignee.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/assignees/:assignee",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/assignees/:assignee"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List all labels for this repository.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/labels",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/labels"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a label.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/labels",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/labels",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a single label.\n\nParameters:\n\nname: Name of the label.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/labels/:name",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/labels/:name"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Update a label.\n\nParameters:\n\nname: Name of the label.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "patch",
            "name": "/repos/:ownerId/:repoId/labels/:name",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/labels/:name",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Delete a label.\n\nParameters:\n\nname: Name of the label.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/repos/:ownerId/:repoId/labels/:name",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/labels/:name"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List milestones for a repository.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/milestones",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/milestones?state=&sort=&direction="
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a milestone.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/milestones",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/milestones",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a single milestone.\n\nParameters:\n\nnumber: Id of the milestone.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/milestones/:number",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/milestones/:number"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Update a milestone.\n\nParameters:\n\nnumber: Id of the milestone.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "patch",
            "name": "/repos/:ownerId/:repoId/milestones/:number",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/milestones/:number",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Delete a milestone.\n\nParameters:\n\nnumber: Id of the milestone.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/repos/:ownerId/:repoId/milestones/:number",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/milestones/:number"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get labels for every issue in a milestone.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/milestones/:number/labels",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/milestones/:number/labels"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List pull requests.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/pulls",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/pulls?state=&head=&base="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Create a pull request.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/pulls",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/pulls"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a single pull request.\n\nParameters:\n\nnumber: Id of a pull.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/pulls/:number",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/pulls/:number"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Update a pull request.\n\nParameters:\n\nnumber: Id of a pull.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "patch",
            "name": "/repos/:ownerId/:repoId/pulls/:number",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/pulls/:number",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List pull requests files.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/pulls/:number/files",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/pulls/:number/files"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List commits on a pull request.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/pulls/:number/commits",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/pulls/:number/commits"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get if a pull request has been merged.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/pulls/:number/merge",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/pulls/:number/merge"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Merge a pull request (Merge Button™)\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "put",
            "name": "/repos/:ownerId/:repoId/pulls/:number/merge",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/pulls/:number/merge",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List comments on a pull request.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/pulls/:number/comments",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/pulls/:number/comments"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a comment.\n  #TODO Alternative input ( http://developer.github.com/v3/pulls/comments/ )\n  description: |\n    Alternative Input.\n    Instead of passing commit_id, path, and position you can reply to an\n    existing Pull Request Comment like this:\n\n        body\n           Required string\n        in_reply_to\n           Required number - Comment id to reply to.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/pulls/:number/comments",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/pulls/:number/comments",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List comments in a repository.\nBy default, Review Comments are ordered by ascending ID.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/pulls/comments",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/pulls/comments?sort=&direction=&since="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a single comment.\n\nParameters:\n\nnumber: Id of the comment.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/pulls/comments/:number",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/pulls/comments/:number"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Edit a comment.\n\nParameters:\n\nnumber: Id of the comment.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "patch",
            "name": "/repos/:ownerId/:repoId/pulls/comments/:number",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/pulls/comments/:number",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Delete a comment.\n\nParameters:\n\nnumber: Id of the comment.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/repos/:ownerId/:repoId/pulls/comments/:number",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/pulls/comments/:number"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List.\nWhen authenticating as an organization owner of an organization-owned\nrepository, all organization owners are included in the list of\ncollaborators. Otherwise, only users with access to the repository are\nreturned in the collaborators list.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/collaborators",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/collaborators"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Check if user is a collaborator\n\nParameters:\n\nuser: Login of the user.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/collaborators/:user",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/collaborators/:user"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Add collaborator.\n\nParameters:\n\nuser: Login of the user.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "put",
            "name": "/repos/:ownerId/:repoId/collaborators/:user",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/collaborators/:user"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Remove collaborator.\n\nParameters:\n\nuser: Login of the user.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/repos/:ownerId/:repoId/collaborators/:user",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/collaborators/:user"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List commit comments for a repository.\nComments are ordered by ascending ID.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/comments",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/comments"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a single commit comment.\n\nParameters:\n\ncommentId: Id of a comment.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/comments/:commentId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/comments/:commentId"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Update a commit comment.\n\nParameters:\n\ncommentId: Id of a comment.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "patch",
            "name": "/repos/:ownerId/:repoId/comments/:commentId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/comments/:commentId",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Delete a commit comment\n\nParameters:\n\ncommentId: Id of a comment.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/repos/:ownerId/:repoId/comments/:commentId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/comments/:commentId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List commits on a repository.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/commits",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/commits?sha=&path=&author=&since=&until="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a single commit.\n\nParameters:\n\nshaCode: SHA-1 code of the commit.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/commits/:shaCode",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/commits/:shaCode"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List comments for a single commitList comments for a single commit.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/commits/:shaCode/comments",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/commits/:shaCode/comments"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a commit comment.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/commits/:shaCode/comments",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/commits/:shaCode/comments",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get contents.\nThis method returns the contents of a file or directory in a repository.\nFiles and symlinks support a custom media type for getting the raw content.\nDirectories and submodules do not support custom media types.\nNote: This API supports files up to 1 megabyte in size.\nHere can be many outcomes. For details see \"http://developer.github.com/v3/repos/contents/\"\n\n\nParameters:\n\npath: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/contents/:path",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/contents/:path?path=&ref="
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a file.\n\nParameters:\n\npath: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "put",
            "name": "/repos/:ownerId/:repoId/contents/:path",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/contents/:path",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Delete a file.\nThis method deletes a file in a repository.\n\n\nParameters:\n\npath: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "delete",
            "name": "/repos/:ownerId/:repoId/contents/:path",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/contents/:path",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get archive link.\nThis method will return a 302 to a URL to download a tarball or zipball\narchive for a repository. Please make sure your HTTP framework is\nconfigured to follow redirects or you will need to use the Location header\nto make a second GET request.\nNote: For private repositories, these links are temporary and expire quickly.\n\n\nParameters:\n\narchive_format: \n\npath: Valid Git reference, defaults to 'master'.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/:archive_format/:path",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/:archive_format/:path"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List downloads for a repository.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/downloads",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/downloads"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a new download (Part 1: Create the resource).\nFor part 2 see http://developer.github.com/v3/repos/downloads/#create-a-new-download-part-2-upload-file-to-s3\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/downloads",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/downloads",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a single download.\n\nParameters:\n\ndownloadId: Id of the download.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/downloads/:downloadId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/downloads/:downloadId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Delete a download.\n\nParameters:\n\ndownloadId: Id of the download.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/repos/:ownerId/:repoId/downloads/:downloadId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/downloads/:downloadId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List forks.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/forks",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/forks?sort="
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a fork.\nForking a Repository happens asynchronously. Therefore, you may have to wait\na short period before accessing the git objects. If this takes longer than 5\nminutes, be sure to contact Support.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/forks",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/forks",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get list of keys.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/keys",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/keys"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a key.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/keys",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/keys",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a key\n\nParameters:\n\nkeyId: Id of a key.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/keys/:keyId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/keys/:keyId"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Edit a key.\n\nParameters:\n\nkeyId: Id of a key.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "patch",
            "name": "/repos/:ownerId/:repoId/keys/:keyId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/keys/:keyId",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Delete a key.\n\nParameters:\n\nkeyId: Id of a key.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/repos/:ownerId/:repoId/keys/:keyId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/keys/:keyId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get list of hooks.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/hooks",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/hooks"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a hook.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/hooks",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/hooks",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get single hook.\n\nParameters:\n\nhookId: Id of the hook.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/hooks/:hookId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/hooks/:hookId"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Edit a hook.\n\nParameters:\n\nhookId: Id of the hook.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "patch",
            "name": "/repos/:ownerId/:repoId/hooks/:hookId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/hooks/:hookId",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Delete a hook.\n\nParameters:\n\nhookId: Id of the hook.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/repos/:ownerId/:repoId/hooks/:hookId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/hooks/:hookId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Test a push hook.\nThis will trigger the hook with the latest push to the current repository\nif the hook is subscribed to push events. If the hook is not subscribed\nto push events, the server will respond with 204 but no test POST will\nbe generated.\nNote: Previously /repos/:owner/:repo/hooks/:id/test\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/hooks/:hookId/tests",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/hooks/:hookId/tests"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Perform a merge.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/merges",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/merges",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List Statuses for a specific Ref.\n\nParameters:\n\nref: Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.\n\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/statuses/:ref",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/statuses/:ref"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a Status.\n\nParameters:\n\nref: Ref to list the statuses from. It can be a SHA, a branch name, or a tag name.\n\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/repos/:ownerId/:repoId/statuses/:ref",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/statuses/:ref",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get contributors list with additions, deletions, and commit counts.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/stats/contributors",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/stats/contributors"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get the last year of commit activity data.\nReturns the last year of commit activity grouped by week. The days array\nis a group of commits per day, starting on Sunday.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/stats/commit_activity",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/stats/commit_activity"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get the number of additions and deletions per week.\nReturns a weekly aggregate of the number of additions and deletions pushed\nto a repository.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/stats/code_frequency",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/stats/code_frequency"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get the weekly commit count for the repo owner and everyone else.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/stats/participation",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/stats/participation"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get the number of commits per hour in each day.\nEach array contains the day number, hour number, and number of commits\n0-6 Sunday - Saturday\n0-23 Hour of day\nNumber of commits\n\nFor example, [2, 14, 25] indicates that there were 25 total commits, during\nthe 2.00pm hour on Tuesdays. All times are based on the time zone of\nindividual commits.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/repos/:ownerId/:repoId/stats/punch_card",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/repos/:ownerId/:repoId/stats/punch_card"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get the authenticated user.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Update the authenticated user.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "patch",
            "name": "/user",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List public and private organizations for the authenticated user.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/orgs",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/orgs"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a single user.\n\nParameters:\n\nuserId: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/:userId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/:userId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List events that a user has received.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/:userId/received_events",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/:userId/received_events"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List public events that a user has received.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/:userId/received_events/public",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/:userId/received_events/public"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List all public organizations for a user.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/:userId/orgs",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/:userId/orgs"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List events performed by a user.\nIf you are authenticated as the given user, you will see your private events.\nOtherwise, you'll only see public events.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/:userId/events",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/:userId/events"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List public events performed by a user.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/:userId/events/public",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/:userId/events/public"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List events for an organization.\n\nParameters:\n\norgId: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/:userId/events/orgs/:orgId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/:userId/events/orgs/:orgId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List repositories being starred.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/:userId/starred",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/:userId/starred?sort=&direction="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List repositories being watched by a user.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/:userId/subscriptions",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/:userId/subscriptions"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List email addresses for a user.\nIn the final version of the API, this method will return an array of hashes\nwith extended information for each email address indicating if the address\nhas been verified and if it's the user's primary email address for GitHub.\nUntil API v3 is finalized, use the application/vnd.github.v3 media type to\nget other response format.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/emails",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/emails"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Add email address(es).\nYou can post a single email address or an array of addresses.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "post",
            "name": "/user/emails",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/emails"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Delete email address(es).\nYou can include a single email address or an array of addresses.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "delete",
            "name": "/user/emails",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/emails",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List who the authenticated user is following.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/following",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/following"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Check if you are following a user.\n\nParameters:\n\nuserId: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/following/:userId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/following/:userId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Follow a user.\nFollowing a user requires the user to be logged in and authenticated with\nbasic auth or OAuth with the user:follow scope.\n\n\nParameters:\n\nuserId: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "put",
            "name": "/user/following/:userId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/following/:userId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Unfollow a user.\nUnfollowing a user requires the user to be logged in and authenticated with\nbasic auth or OAuth with the user:follow scope.\n\n\nParameters:\n\nuserId: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/user/following/:userId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/following/:userId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List your public keys.\nLists the current user's keys. Management of public keys via the API requires\nthat you are authenticated through basic auth, or OAuth with the 'user' scope.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/keys",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/keys"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a public key.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/user/keys",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/keys",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a single public key.\n\nParameters:\n\nkeyId: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/keys/:keyId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/keys/:keyId"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Update a public key.\n\nParameters:\n\nkeyId: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "patch",
            "name": "/user/keys/:keyId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/keys/:keyId",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Delete a public key.\n\nParameters:\n\nkeyId: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/user/keys/:keyId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/keys/:keyId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List repositories being starred by the authenticated user.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/starred",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/starred?sort=&direction="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Check if you are starring a repository.\n\nParameters:\n\nownerId: \n\nrepoId: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/starred/:ownerId/:repoId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/starred/:ownerId/:repoId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Star a repository.\n\nParameters:\n\nownerId: \n\nrepoId: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "put",
            "name": "/user/starred/:ownerId/:repoId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/starred/:ownerId/:repoId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Unstar a repository\n\nParameters:\n\nownerId: \n\nrepoId: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/user/starred/:ownerId/:repoId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/starred/:ownerId/:repoId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List repositories being watched by the authenticated user.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/subscriptions",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/subscriptions"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Check if you are watching a repository.\n\nParameters:\n\nownerId: Id of the owner.\n\nrepoId: Id of repository.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/subscriptions/:ownerId/:repoId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/subscriptions/:ownerId/:repoId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Watch a repository.\n\nParameters:\n\nownerId: Id of the owner.\n\nrepoId: Id of repository.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "put",
            "name": "/user/subscriptions/:ownerId/:repoId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/subscriptions/:ownerId/:repoId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Stop watching a repository\n\nParameters:\n\nownerId: Id of the owner.\n\nrepoId: Id of repository.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "delete",
            "name": "/user/subscriptions/:ownerId/:repoId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/subscriptions/:ownerId/:repoId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List issues.\nList all issues across owned and member repositories for the authenticated\nuser.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/issues",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/issues?filter=&state=&labels=&sort=&direction=&since="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List repositories for the authenticated user. Note that this does not include\nrepositories owned by organizations which the user can access. You can list\nuser organizations and list organization repositories separately.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/user/repos",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/repos?type="
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "Create a new repository for the authenticated user. OAuth users must supply\nrepo scope.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/user/repos",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/user/repos",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get all users.\nThis provides a dump of every user, in the order that they signed up for GitHub.\nNote: Pagination is powered exclusively by the since parameter. Use the Link\nheader to get the URL for the next page of users.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/users",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/users?since="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List a user's followers.\n\nParameters:\n\nuserId: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/users/:userId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/users/:userId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Check if one user follows another.\n\nParameters:\n\ntargetUserId: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/users/:userId/following/:targetUserId",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/users/:userId/following/:targetUserId"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List public keys for a user.\nLists the verified public keys for a user. This is accessible by anyone.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/users/:userId/keys",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/users/:userId/keys"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List a user's gists.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/users/:userId/gists",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/users/:userId/gists?since="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List all public organizations for a user.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/users/:userId/orgs",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/users/:userId/orgs"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List public repositories for the specified user.\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/users/:userId/repos",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/users/:userId/repos?type="
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Listing available templates.\nList all templates available to pass as an option when creating a repository.\n\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/gitignore/templates",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gitignore/templates"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "Get a single template.\n\nParameters:\n\nlanguage: \n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/gitignore/templates/:language",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/gitignore/templates/:language"
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: application/json\n",
            "id": "",
            "method": "post",
            "name": "/markdown",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/markdown",
            "rawModeData": ""
        },
        {
            "collectionId": "",
            "dataMode": "raw",
            "descriptionFormat": "html",
            "description": "\n\nParameters:\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \nContent-Type: text/plain\n",
            "id": "",
            "method": "post",
            "name": "/markdown/raw",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/markdown/raw",
            "rawModeData": "<p>Hello world github/linguist#1 <strong>cool</strong>, and #1!</p>\n"
        },
        {
            "collectionId": "",
            "dataMode": "params",
            "descriptionFormat": "html",
            "description": "List public events for a network of repositories.\n\nParameters:\n\nownerId: Id of the owner.\n\nrepoId: Id of repository.\n\n",
            "data": [],
            "headers": "X-GitHub-Media-Type: \nAccept: \nX-RateLimit-Limit: \nX-RateLimit-Remaining: \nX-RateLimit-Reset: \nX-GitHub-Request-Id: \n",
            "id": "",
            "method": "get",
            "name": "/networks/:ownerId/:repoId/events",
            "preRequestScript": "",
            "pathVariables": {},
            "responses": [],
            "synced": false,
            "tests": "",
            "time": 0,
            "url": "https://api.github.com/networks/:ownerId/:repoId/events"
        }
    ],
    "synced": false,
    "timestamp": 0
}